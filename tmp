"dein{{{
if version>=800 && load_plugin
	let s:dein_dir=expand('~/.vim')
	let s:dein_repo_dir=s:dein_dir.'/repos/github.com/Shougo/dein.vim'
	if &runtimepath !~# '/dein.vim'
		if !isdirectory(s:dein_repo_dir)
			execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
		endif
		execute 'set runtimepath^='.fnamemodify(s:dein_repo_dir, ':p')
	endif
	call dein#begin(s:dein_dir)
	call dein#add('Shougo/dein.vim') "plugin manager
	call dein#add('thinca/vim-scouter') " :Scouter = power of vimrc
	call dein#add('tyru/skk.vim') " JPN input
	call dein#add('dag/vim-fish') " fish
	call dein#add('lervag/vimtex') " tex
	"latex
	let g:tex_flavor='latex'
	let g:vimtex_compiler_latexmk = {'callback' : 0}
	" autocmd FileType tex setlocal spell spelllang=en_us
	call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'tex'})
	call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'tex'})
	call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'tex'})
	"files
	call dein#add('soramugi/auto-ctags.vim') " automatically generate tags
	call dein#add('majutsushi/tagbar') " show tagbar
	call dein#add('scrooloose/nerdtree') " show nerdtree
	"files&ctags
	nnoremap <F2> :TodoToggle<CR>:wincmd w<CR>:echo<CR>:NERDTreeToggle<CR>:TagbarToggle<CR>:echo<CR>
	nnoremap ,n :NERDTreeToggle<CR>
	let g:auto_ctags=1
	nnoremap ,t :TagbarToggle<CR>
	let g:tagbar_width=25
	"filetype
	call dein#add('matze/vim-tex-fold') " tex foldings
	call dein#add('vim-scripts/verilog.vim') " verilog
	call dein#add('stephpy/vim-yaml') " yaml

	call dein#add('itchyny/lightline.vim') " status line @ bottom
	call dein#add('cohama/lexima.vim') " auto close parenthesis
	call dein#add('mattn/emmet-vim') " for HTMLs


	"input
	call dein#add('tomtom/tcomment_vim') " gcc = comment out
	"txtobj
	call dein#add('kana/vim-textobj-user')
	call dein#add('osyo-manga/vim-textobj-blockwise')
	call dein#add('thinca/vim-textobj-comment')
	call dein#add('deris/vim-textobj-enclosedsyntax')
	call dein#add('kana/vim-textobj-fold')
	call dein#add('kana/vim-textobj-function')
	call dein#add('thinca/vim-textobj-function-javascript')
	call dein#add('thinca/vim-textobj-function-perl')
	call dein#add('kana/vim-textobj-indent')
	call dein#add('rhysd/vim-textobj-ruby')
	call dein#add('kana/vim-textobj-underscore')
	call dein#add('mattn/vim-textobj-url')
	"end
	call dein#end()
	filetype plugin indent on
	if dein#check_install()
		call dein#install()
	endif
	"}}}
	"plugins{{{
	if colorscheme_no==1
		colorscheme hybrid
	endif
	let g:neosnippet#enable_snipmate_compatibility=1
	"comment
	if !exists('g:tcomment_types')
		let g:tcomment_types = {}
	endif
	let g:tcomment_types = {
				\'php_surround' : "<?php %s ?>",
				\'eruby_surround' : "<%% %s %%>",
				\'eruby_surround_minus' : "<%% %s -%%>",
				\'eruby_surround_equality' : "<%%= %s %%>",
				\}
	"lightline
	set laststatus=2
	set noshowmode
	if patched_font
		let g:lightline={
					\ 'colorscheme': 'jellybeans',
					\ 'separator': { 'left': "\u2b80", 'right': "\u2b82" },
					\ 'subseparator': { 'left': "\u2b81", 'right': "\u2b83" },
					\ }
	else
		let g:lightline={
					\ 'colorscheme': 'jellybeans',
					\ }
	endif
	let g:lightline.component = {
				\ 'lineinfo': '%3l [%L]:%-2v',
				\ 'skkstatus': '%{strlen(SkkGetModeStr())-1 ? substitute(substitute(SkkGetModeStr(), "[SKK:", "", ""), "]", "", "") : ""}',
				\ }
	let g:lightline.active = {
				\ 'left':  [ [ 'mode', 'paste' ],
				\            [ 'readonly', 'filename', 'modified' ] ],
				\ 'right': [ [ 'lineinfo','winform'],
				\            [ 'percent' ],
				\            [ 'skkstatus', 'fileformat', 'fileencoding', 'filetype' ] ] ,
				\ }
	let g:lightline.inactive = {
				\ 'left': [ [ 'filename' ] ],
				\ 'right': [ [ 'lineinfo' ] ],
				\ }
	"neocomplete
	let g:neocomplete#enable_at_startup=1
	let g:neocomplete#enable_smart_case=1
	let g:neocomplete#sources#syntax#min_keyword_length=3
	let g:neocomplete#lock_buffer_name_pattern='\*ku\*'
	let g:neocomplete#sources#dictionary#dictionaries={
				\ 'default' : '',
				\ 'vimshell' : $HOME.'/.vimshell_hist',
				\ 'scheme' : $HOME.'/.gosh_completions'
				\ }
	inoremap <expr><Tab>  pumvisible() ? "\<C-n>" : "\<Tab>"
	set completeopt=menuone
	"skk
	if use_ja_input
		map! <C-j> <Plug>(skk-toggle-im)
		let g:skk_abbrev_to_zenei_key=""
		let g:skk_keep_state=1
		let g:skk_large_jisyo = expand('~/.skk-jisyo')
		" let g:skk_auto_save_jisyo = -1
		let g:eskk#enable_completion = 1
		let g:skk_kutouten_type = "en"
	else
		let g:skk_control_j_key=""
	endif
	function! MySkkMap()
		lmap <buffer> <Up>    <NOP>
		lmap <buffer> <Down>  <NOP>
		lmap <buffer> <Right> <NOP>
		lmap <buffer> <Left>  <NOP>
		" lmap <buffer> <F5>  <NOP>
	endfunction
	let g:skk_enable_hook = 'MySkkMap'
	"syntastic
	" let g:syntastic_enable_signs=1
	" let g:syntastic_auto_loc_list=2
	" let g:syntastic_mode_map={'mode': 'passive'}
	" augroup AutoSyntastic
	"   autocmd!
	"   autocmd InsertLeave,TextChanged * call s:syntastic()
	" augroup END
	" function! s:syntastic()
	"   w
	"   SyntasticCheck
	" endfunction
	"unite
	" let g:unite_enable_start_insert=0
	" let g:unite_source_history_yank_enable =1
	" let g:unite_source_file_mru_limit=200
	" nnoremap <silent> [Space]u  :<C-u>Unite
	" nnoremap <silent> [Space]uy :<C-u>Unite history/yank<CR>
	" nnoremap <silent> [Space]ub :<C-u>Unite buffer<CR>
	" nnoremap <silent> [Space]uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
	" nnoremap <silent> [Space]ur :<C-u>Unite -buffer-name=register register<CR>
	" nnoremap <silent> [Space]uu :<C-u>Unite file_mru buffer<CR>
else
	let colorscheme_no=0
	"abolish
	set gdefault
	nnoremap [Space]s :<C-u>%s/
	vnoremap [Space]s :s/
	nnoremap <F2> :TodoToggle<CR>
endif
"}}}
